
===== File: test/java/com/cap/dis/DisApplicationTests.java =====

package com.cap.dis;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class DisApplicationTests {

	@Test
	void contextLoads() {
	}

}

========================



===== File: main/java/com/cap/dis/repository/EntityStateRepository.java =====

package com.cap.dis.repository;

import com.cap.dis.model.EntityStateRecord;
import org.springframework.data.jpa.repository.JpaRepository;

public interface EntityStateRepository extends JpaRepository<EntityStateRecord, Long> {
}

========================



===== File: main/java/com/cap/dis/DisProcessingApplication.java =====

package com.cap.dis;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DisProcessingApplication {
    public static void main(String[] args) {
        SpringApplication.run(DisProcessingApplication.class, args);
    }
}

========================



===== File: main/java/com/cap/dis/service/PduProcessingService.java =====

package com.cap.dis.service;

import com.cap.dis.model.EntityStateRecord;
import com.cap.dis.model.PduMessage;
import com.cap.dis.repository.EntityStateRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
public class PduProcessingService {

    private static final Logger log = LoggerFactory.getLogger(PduProcessingService.class);

    private final EntityStateRepository repository;
    private final ObjectMapper objectMapper = new ObjectMapper();

    @KafkaListener(topics = "${kafka.topic}", groupId = "${spring.kafka.consumer.group-id}", concurrency = "3")
    @Transactional
    public void consume(String message) {
        log.info("Received message from Kafka: {}", message);
        try {
            // Deserialize the JSON message into a PduMessage object
            PduMessage pduMessage = objectMapper.readValue(message, PduMessage.class);
            if ("EntityStatePdu".equals(pduMessage.getType())) {
                storePduData(pduMessage);
            } else {
                log.warn("Received unknown PDU type: {}", pduMessage.getType());
            }
        } catch (Exception e) {
            log.error("Error processing message: {}", message, e);
        }
    }

    private void storePduData(PduMessage pduMessage) {
        EntityStateRecord record = new EntityStateRecord();
        record.setSite(pduMessage.getEntityId().getSite());
        record.setApplication(pduMessage.getEntityId().getApplication());
        record.setEntity(pduMessage.getEntityId().getEntity());
        record.setLocationX(pduMessage.getLocation().getX());
        record.setLocationY(pduMessage.getLocation().getY());
        record.setLocationZ(pduMessage.getLocation().getZ());
        record.setTimestamp(pduMessage.getTimestamp());
        repository.save(record);
        log.info("Saved EntityStateRecord: {}", record);
    }
}

========================



===== File: main/java/com/cap/dis/model/Location.java =====

package com.cap.dis.model;

import lombok.Data;

@Data
public class Location {
    private double x;
    private double y;
    private double z;
}

========================



===== File: main/java/com/cap/dis/model/EntityID.java =====

package com.cap.dis.model;

import lombok.Data;

@Data
public class EntityID {
    private int site;
    private int application;
    private int entity;
}

========================



===== File: main/java/com/cap/dis/model/EntityStateRecord.java =====

package com.cap.dis.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Data;

@Entity
@Data
public class EntityStateRecord {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private int site;
    private int application;
    private int entity;

    private double locationX;
    private double locationY;
    private double locationZ;

    private long timestamp;
}

========================



===== File: main/java/com/cap/dis/model/PduMessage.java =====

package com.cap.dis.model;

import lombok.Data;

@Data
public class PduMessage {
    private String type;
    private EntityID entityId;
    private Location location;
    private long timestamp;
}

========================



===== File: main/resources/application.properties =====

spring.application.name=dis

server.port=8080

# Kafka Consumer Configuration
kafka.topic=dis-pdus
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=processing-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# PostgreSQL Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/dis_db
spring.datasource.username=dis_user
spring.datasource.password=dis_pass
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
========================


